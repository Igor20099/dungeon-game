

local exp_scale = nil
local exp_count = 0
local max_exp_scale = 0
math.randomseed(os.time())

--Инициализация монет в начале игры
local function set_coins(self,coins)
	self.coins = coins
	gui.set_text(gui.get_node('coins_count'), coins)
end

--Добавление монет при уничтожении противника
local function add_coins(self,coins)
	particlefx.play('/game_manager#coins')
	local pos_y = gui.get(gui.get_node('add_coins'), 'position.y')
	local temp_current_coins = self.coins
	-- gui.set(gui.get_node('add_coins'), 'color.w', 1)
	-- gui.animate(gui.get_node('add_coins'), 'color.w', 0, gui.EASING_LINEAR, 1)
	-- gui.animate(gui.get_node('add_coins'), 'position.y', pos_y + 50, gui.EASING_LINEAR, 1)
	-- gui.set_text(gui.get_node('coins_from_enemy'), '+'..coins)
	-- timer.delay(1.5, false, function() gui.set(gui.get_node('add_coins'), 'position.y', pos_y) end)
	local rand_y = math.random(380,400)
	coins_message = gui.new_text_node(vmath.vector3(100,rand_y,1), '+'..coins)
	coins_image = gui.new_box_node(vmath.vector3(150,rand_y + 2,1), vmath.vector3(30,30,1))
	gui.set_texture(coins_image, 'items')
	gui.play_flipbook(coins_image, "coin")
	gui.animate(coins_message, 'color.w', 0, gui.EASING_LINEAR, 0.8)
	gui.animate(coins_message, 'position.y', rand_y + 70, gui.EASING_LINEAR, 0.4)
	gui.animate(coins_image, 'color.w', 0, gui.EASING_LINEAR, 0.8)
	gui.animate(coins_image, 'position.y', rand_y + 70 + 2, gui.EASING_LINEAR, 0.4)
	self.coins = self.coins + coins
	self.add_coins = timer.delay(0.002, true, function() 
		if self.coins > temp_current_coins then
			temp_current_coins = temp_current_coins + 1
			gui.set_text(gui.get_node('coins_count'), temp_current_coins)
		else
			timer.cancel(self.add_coins)
		end
	end)
end



--Инициализация начального здоровья
local function set_health(self,health)
	self.max_health = health
	self.health = health
	gui.set_text(gui.get_node('health_count'), self.health..'/'..self.max_health)
end

local function add_level(self)
	self.level = self.level + 1
	gui.set_text(gui.get_node('player_level'), 'Ур. '..self.level)
end

local function add_exp(self,exp)
	self.exp = self.exp + exp
end

--Инициализация начального урона
local function set_damage(self,damage)
	self.damage = damage
	gui.set_text(gui.get_node('damage_count'), self.damage)
end

local function add_potion(self)
	gui.set(gui.get_node('potion'), 'color.w', 1)
	gui.set(gui.get_node('potion_count'), 'color.w', 1)
	self.potions = self.potions + 1
	gui.set_text(gui.get_node('potion_count'), self.potions)

	potion_message = gui.new_text_node(vmath.vector3(130,50,1), '+'..1)
	potion_image = gui.new_box_node(vmath.vector3(160,50,1), vmath.vector3(40,40,1))
	gui.set_texture(potion_image, 'items')
	gui.play_flipbook(potion_image, "potion")
	gui.animate(potion_message, 'color.w', 0, gui.EASING_LINEAR, 1)
	gui.animate(potion_message, 'position.y', 50 + 50, gui.EASING_LINEAR, 1)
	gui.animate(potion_image, 'color.w', 0, gui.EASING_LINEAR, 1)
	gui.animate(potion_image, 'position.y', 50 + 50 + 2, gui.EASING_LINEAR, 1)

end

local function use_potion(self) 
	if self.health < self.max_health and self.potions > 0 then
		gui.set(gui.get_node('screen_health'), 'color.w', 0.6)
		gui.animate(gui.get_node('screen_health'), 'color.w', 0, gui.EASING_LINEAR, 0.3)
		self.potions = self.potions - 1
		gui.set_text(gui.get_node('potion_count'), self.potions)
		self.health = self.max_health
		if self.armor <= 0 then
			gui.set_text(gui.get_node('health_count'), self.health..'/'..self.max_health)
		end
		
	end

	if self.potions == 0 then
		gui.set(gui.get_node('potion'), 'color.w', 0.5)
		gui.set(gui.get_node('potion_count'), 'color.w', 0.5)
	end

end

--Инициализация начальной выносливости
local function set_energy(self,energy)
	self.max_energy = energy
	self.energy = energy
	gui.set_text(gui.get_node('energy_count'), self.energy..'/'..self.max_energy)
end

local function take_energy(self,energy)
	self.energy = self.energy - energy
	if self.energy <=0 then
		self.energy = 0
		msg.post(self.enemy, 'not_energy')
		msg.post('#', 'add_energy')
		
	end
	
	
	gui.set_text(gui.get_node('energy_count'), self.energy..'/'..self.max_energy)
end

local function take_damage(self,enemy_damage,enemy_type)
	local damage_type = self.damage_types[math.random(1,#self.damage_types)]
	local pos_y = gui.get(gui.get_node('enemy_damage'), 'position.y')
	local pos_x = gui.get(gui.get_node('enemy_damage'), 'position.x')
	if damage_type == 'miss' then
		if self.armor > 0 then
			gui.set_text(gui.get_node('enemy_damage'),'Промах')
			gui.set(gui.get_node('enemy_damage'), 'position.x', pos_x + 150)
			gui.set(gui.get_node('enemy_damage'), 'position.y', pos_y + 300)
			gui.set_color(gui.get_node('enemy_damage'),vmath.vector4(1,1,1,0))
			gui.animate(gui.get_node('enemy_damage'), 'color.w', 0, gui.EASING_LINEAR, 1)
			gui.animate(gui.get_node('enemy_damage'), 'position.y', pos_y + 300 + 50, gui.EASING_LINEAR, 1)
			timer.delay(1.5, false, function() gui.set(gui.get_node('enemy_damage'), 'position.y', pos_y)
			gui.set(gui.get_node('enemy_damage'), 'position.x', pos_x)
		 end)
			gui.set(gui.get_node('enemy_damage'), 'color.w', 1)
		else
			gui.set_text(gui.get_node('enemy_damage'),'Промах')
			gui.set_color(gui.get_node('enemy_damage'),vmath.vector4(1,1,1,0))
			gui.animate(gui.get_node('enemy_damage'), 'color.w', 0, gui.EASING_LINEAR, 1)
			gui.animate(gui.get_node('enemy_damage'), 'position.y', pos_y + 5, gui.EASING_LINEAR, 1)
			timer.delay(1.5, false, function() gui.set(gui.get_node('enemy_damage'), 'position.y', pos_y) end)
			gui.set(gui.get_node('enemy_damage'), 'color.w', 1)
		end
		
	elseif damage_type == 'damage' then
		if self.armor > 0 then
			gui.set(gui.get_node('enemy_damage'), 'position.y', pos_y + 300)
			gui.set(gui.get_node('enemy_damage'), 'position.x', pos_x + 150)
			gui.set(gui.get_node('screen_damage'), 'color.w', 0.6)
			gui.animate(gui.get_node('screen_damage'), 'color.w', 0, gui.EASING_LINEAR, 0.3)
			gui.set_color(gui.get_node('enemy_damage'),vmath.vector4(1,1,1,0))
			self.armor = self.armor - enemy_damage
			gui.set_text(gui.get_node('enemy_damage'), '-'..enemy_damage)
			gui.animate(gui.get_node('enemy_damage'), 'color.w', 0, gui.EASING_LINEAR, 1)
			gui.animate(gui.get_node('enemy_damage'), 'position.y', pos_y +300 + 50, gui.EASING_LINEAR, 1)
			timer.delay(1.5, false, function() gui.set(gui.get_node('enemy_damage'), 'position.y', pos_y) 
			gui.set(gui.get_node('enemy_damage'), 'position.x', pos_x)

		end)
			gui.set(gui.get_node('enemy_damage'), 'color.w', 1)
			gui.set_text(gui.get_node('health_count'), self.armor)
			if self.armor <= 0 then
				self.armor = 0
				gui.set(gui.get_node('health_count'), 'position.x', self.pos_health_count_x)
				gui.set_texture(gui.get_node('heart'), 'items')
				gui.play_flipbook(gui.get_node('heart'), "heart")
				gui.set_scale(gui.get_node('heart'), vmath.vector3(3,3,1))
				gui.set_scale(gui.get_node('health_count'), vmath.vector3(0.3,0.3,1))
				gui.set_scale(gui.get_node('enemy_damage'), vmath.vector3(0.3,0.3,1))
				gui.set_text(gui.get_node('health_count'), self.health..'/'..self.max_health)
			end
		else
			
			gui.set(gui.get_node('screen_damage'), 'color.w', 0.6)
			gui.animate(gui.get_node('screen_damage'), 'color.w', 0, gui.EASING_LINEAR, 0.3)
			gui.set_color(gui.get_node('enemy_damage'),vmath.vector4(1,1,1,0))
			self.health = self.health - enemy_damage
			gui.set_text(gui.get_node('enemy_damage'), '-'..enemy_damage)
			gui.animate(gui.get_node('enemy_damage'), 'color.w', 0, gui.EASING_LINEAR, 1)
			gui.animate(gui.get_node('enemy_damage'), 'position.y', pos_y + 5, gui.EASING_LINEAR, 1)
			timer.delay(1.5, false, function() gui.set(gui.get_node('enemy_damage'), 'position.y', pos_y) 
			gui.set(gui.get_node('enemy_damage'), 'position.x', pos_x)
		end)
			gui.set(gui.get_node('enemy_damage'), 'color.w', 1)
			gui.set_text(gui.get_node('health_count'), self.health..'/'..self.max_health)

		end
		if enemy_type == hash('robber') and self.coins >= 50 then
			self.coins = self.coins - 50
			
			gui.set_enabled(gui.get_node('minus_coin'), true)
			local pos_y = gui.get(gui.get_node('minus_coin'), 'position.y')
			gui.set(gui.get_node('minus_coin'), 'color.w', 1)
			gui.set_text(gui.get_node('minus_coin_count'), '-'..50)
			gui.animate(gui.get_node('minus_coin'), 'position.y', pos_y + 20, gui.EASING_LINEAR, 1)
			gui.animate(gui.get_node('minus_coin'), 'color.w', 0, gui.EASING_LINEAR, 1)
			timer.delay(1.3, false, function() gui.set(gui.get_node('minus_coin'), 'position.y', pos_y) end)
			gui.set_text(gui.get_node('coins_count'), self.coins)
			particlefx.play('/game_manager#coins_2')
		end
		if enemy_type == hash('vampire') then
			msg.post(self.enemy, 'add_health',{add_health = 10})
		end
		if enemy_type == hash('snake') then
			local rand_poison = math.random(1,2)
			if self.armor > 0  then
				if rand_poison == 1 then
					damage_message = gui.new_text_node(vmath.vector3(100,760,1),-5)
					gui.set(damage_message, gui.PROP_COLOR, vmath.vector4(0,1,0,1))
					gui.animate(damage_message, 'color.w', 0, gui.EASING_LINEAR,0.8)
					gui.animate(damage_message, 'position.y', 770, gui.EASING_LINEAR, 0.4)

					self.armor= self.armor - 5
					-- local pos_y = gui.get(gui.get_node('enemy_damage'), 'position.y')
					-- gui.set_color(gui.get_node('enemy_damage'),vmath.vector4(0,1,0,0))
					-- gui.set_text(gui.get_node('enemy_damage'), '-'..5)
					-- gui.animate(gui.get_node('enemy_damage'), 'color.w', 0, gui.EASING_LINEAR, 1)
					-- gui.animate(gui.get_node('enemy_damage'), 'position.y', pos_y + 5, gui.EASING_LINEAR, 1)
					-- timer.delay(1.5, false, function() gui.set(gui.get_node('enemy_damage'), 'position.y', pos_y) end)
					-- gui.set(gui.get_node('enemy_damage'), 'color.w', 1)


					gui.set_text(gui.get_node('health_count'), self.armor)
					if self.armor <= 0 then
						self.armor = 0
						gui.set(gui.get_node('health_count'), 'position.x', self.pos_health_count_x)
						gui.set_texture(gui.get_node('heart'), 'items')
						gui.play_flipbook(gui.get_node('heart'), "heart")
						gui.set_scale(gui.get_node('heart'), vmath.vector3(3,3,1))
						gui.set_scale(gui.get_node('health_count'), vmath.vector3(0.3,0.3,1))
						gui.set_scale(gui.get_node('enemy_damage'), vmath.vector3(0.3,0.3,1))
						gui.set_text(gui.get_node('health_count'), self.health..'/'..self.max_health)
					end
				end
				
			else
				if rand_poison == 1 then  
					damage_message = gui.new_text_node(vmath.vector3(110,770,1),-5)
					gui.set(damage_message, gui.PROP_COLOR, vmath.vector4(0,1,0,1))
					gui.animate(damage_message, 'color.w', 0, gui.EASING_LINEAR,0.8)
					gui.animate(damage_message, 'position.y', 780, gui.EASING_LINEAR, 0.4)
					self.health = self.health - 5
					-- 				gui.set_text(gui.get_node('enemy_damage'), '-'..5)
					-- 				gui.animate(gui.get_node('enemy_damage'), 'color.w', 0, gui.EASING_LINEAR, 1)
					-- 				gui.animate(gui.get_node('enemy_damage'), 'position.y', pos_y + 5, gui.EASING_LINEAR, 1)
					-- 				timer.delay(1.5, false, function() gui.set(gui.get_node('enemy_damage'), 'position.y', pos_y) end)
					-- 				gui.set(gui.get_node('enemy_damage'), 'color.w', 1)
					-- 

					gui.set_text(gui.get_node('health_count'), self.health..'/'..self.max_health)
				end
					
					
					
			end

		end
	elseif damage_type == 'crit_damage' then
		if self.armor > 0 then
			gui.set(gui.get_node('enemy_damage'), 'position.y', pos_y + 300)
			gui.set(gui.get_node('enemy_damage'), 'position.x', pos_x + 150)
			gui.set(gui.get_node('screen_damage'), 'color.w', 0.6)
			gui.animate(gui.get_node('screen_damage'), 'color.w', 0, gui.EASING_LINEAR, 0.3)
			gui.set_color(gui.get_node('enemy_damage'),vmath.vector4(1,0,0,0))
			self.armor = self.armor - enemy_damage * 2
			gui.set_text(gui.get_node('enemy_damage'), '-'..enemy_damage * 2)
			gui.animate(gui.get_node('enemy_damage'), 'color.w', 0, gui.EASING_LINEAR, 1)
			gui.animate(gui.get_node('enemy_damage'), 'position.y', pos_y + 300 + 50, gui.EASING_LINEAR, 1)
			timer.delay(1.5, false, function() gui.set(gui.get_node('enemy_damage'), 'position.y', pos_y) 
			gui.set(gui.get_node('enemy_damage'), 'position.x', pos_x)
		end)
			gui.set(gui.get_node('enemy_damage'), 'color.w', 1)
			gui.set_text(gui.get_node('health_count'), self.armor)
			if self.armor <= 0 then
				self.armor = 0
				gui.set(gui.get_node('health_count'), 'position.x', self.pos_health_count_x)
				gui.set_texture(gui.get_node('heart'), 'items')
				gui.play_flipbook(gui.get_node('heart'), "heart")
				gui.set_scale(gui.get_node('heart'), vmath.vector3(3,3,1))
				gui.set_scale(gui.get_node('health_count'), vmath.vector3(0.3,0.3,1))
				gui.set_scale(gui.get_node('enemy_damage'), vmath.vector3(0.3,0.3,1))
				gui.set_text(gui.get_node('health_count'), self.health..'/'..self.max_health)
			end
		else
			
			gui.set_color(gui.get_node('enemy_damage'),vmath.vector4(1,0,0,0))
			gui.set(gui.get_node('screen_damage'), 'color.w', 0.6)
			gui.animate(gui.get_node('screen_damage'), 'color.w', 0, gui.EASING_LINEAR, 0.3)
			self.health = self.health - enemy_damage * 2
			gui.set_text(gui.get_node('enemy_damage'), '-'..enemy_damage * 2)
			gui.animate(gui.get_node('enemy_damage'), 'color.w', 0, gui.EASING_LINEAR, 1)
			gui.animate(gui.get_node('enemy_damage'), 'position.y', pos_y + 5, gui.EASING_LINEAR, 1)
			timer.delay(1.5, false, function() gui.set(gui.get_node('enemy_damage'), 'position.y', pos_y) end)
			gui.set(gui.get_node('enemy_damage'), 'color.w', 1)
			gui.set_text(gui.get_node('health_count'), self.health..'/'..self.max_health)

		end
		if enemy_type == hash('robber') and self.coins >= 100 then
			self.coins = self.coins - 100

			gui.set_enabled(gui.get_node('minus_coin'), true)
			local pos_y = gui.get(gui.get_node('minus_coin'), 'position.y')
			gui.set(gui.get_node('minus_coin'), 'color.w', 1)
			gui.set_text(gui.get_node('minus_coin_count'), '-'..100)
			gui.animate(gui.get_node('minus_coin'), 'position.y', pos_y + 20, gui.EASING_LINEAR, 1)
			gui.animate(gui.get_node('minus_coin'), 'color.w', 0, gui.EASING_LINEAR, 1)
			timer.delay(1.3, false, function() gui.set(gui.get_node('minus_coin'), 'position.y', pos_y) end)
			gui.set_text(gui.get_node('coins_count'), self.coins)
			particlefx.play('/game_manager#coins_2')
		end

		if enemy_type == hash('vampire') then
			msg.post(self.enemy, 'add_health',{add_health = 20})
		end
		if enemy_type == hash('snake') then
			local rand_poison = math.random(1,2)
			if self.armor > 0  then
				if rand_poison == 1 then
					damage_message = gui.new_text_node(vmath.vector3(100,760,1),-5)
					gui.set(damage_message, gui.PROP_COLOR, vmath.vector4(0,1,0,1))
					gui.animate(damage_message, 'color.w', 0, gui.EASING_LINEAR,0.8)
					gui.animate(damage_message, 'position.y', 770, gui.EASING_LINEAR, 0.4)
					self.armor= self.armor - 5
					gui.set_text(gui.get_node('health_count'), self.armor)
					if self.armor <= 0 then
						self.armor = 0
						gui.set(gui.get_node('health_count'), 'position.x', self.pos_health_count_x)
						gui.set_texture(gui.get_node('heart'), 'items')
						gui.play_flipbook(gui.get_node('heart'), "heart")
						gui.set_scale(gui.get_node('heart'), vmath.vector3(3,3,1))
						gui.set_scale(gui.get_node('health_count'), vmath.vector3(0.3,0.3,1))
						gui.set_scale(gui.get_node('enemy_damage'), vmath.vector3(0.3,0.3,1))
						gui.set_text(gui.get_node('health_count'), self.health..'/'..self.max_health)
					end
				end

			else
				if rand_poison == 1 then  
					damage_message = gui.new_text_node(vmath.vector3(110,770,1),-5)
					gui.set(damage_message, gui.PROP_COLOR, vmath.vector4(0,1,0,1))
					gui.animate(damage_message, 'color.w', 0, gui.EASING_LINEAR,0.8)
					gui.animate(damage_message, 'position.y', 780, gui.EASING_LINEAR, 0.4)
					self.health = self.health - 5
					gui.set_text(gui.get_node('health_count'), self.health..'/'..self.max_health)
				end



			end

		end
	end
	
	if self.health <= 0 then
		self.health = 0
		gui.set_text(gui.get_node('health_count'), self.health..'/'..self.max_health)
		msg.post('/game_manager#game_manager', 'end_game')
	end
	
end

local function set_exp_scale()
	exp_scale = 0
	gui.set(gui.get_node('blue_rect'), 'scale.x', exp_scale)
end

local function add_exp_scale(self,exp)
	exp_count = max_exp_scale / (self.max_exp / exp)
	exp_scale = exp_scale + exp_count
	gui.set(gui.get_node('blue_rect'), 'scale.x', exp_scale)

end

function init(self)
	msg.post('.', 'acquire_input_focus')
	msg.post('#level_up', 'disable')
	self.coins = 0
	self.max_health = 0
	self.health = 0
	self.damage = 0
	self.max_energy = 0
	self.energy = 0
	self.potions = 3
	self.level = 1
	self.exp = 0
	self.max_exp = 500
	self.poison_count = 0
	gui.set_text(gui.get_node('potion_count'), self.potions)
	self.enemy = nil
	self.level_of_dungeon = 1
	self.enemies_of_level = 0
	self.current_enemies_of_level = 0
	self.damage_types = {'miss','damage','crit_damage'}
	max_exp_scale = gui.get(gui.get_node('black_rect1'), 'scale.x')
	set_exp_scale()
	timer.delay(0.2, false, function() msg.post(self.enemy, 'player_damage', {player_damage = self.damage})end)
	gui.set_texture(gui.get_node('sword'), "swords")
	gui.play_flipbook(gui.get_node('sword'), "sword")
	self.buff = 'sword'
	self.energy_time_count = 0.6
	self.armor = 0
	self.pos_health_count_x = gui.get(gui.get_node('health_count'), 'position.x')
	self.chest = nil
	gui.set(gui.get_node('add_coins'), 'color.w', 0)
	gui.set_enabled(gui.get_node('minus_coin'), false)
end


function on_message(self, message_id, message, sender)
	if message_id == hash('start_stats') then
		set_coins(self, message.start_coins)
		set_health(self, message.health)
		set_damage(self, message.damage)
		set_energy(self, message.energy)
	end

	if message_id == hash('chest') then
		self.chest = message.chest
	end

	if message_id == hash('is_buff') then
		if self.buff ~= nil then
			timer.delay(1, false, function() msg.post(self.enemy, 'buff', {buff = self.buff})end)
		end
		
	end
	if message_id == hash('sword') then
		gui.set_texture(gui.get_node('sword'), "swords")
		gui.play_flipbook(gui.get_node('sword'), "sword")
		self.buff = 'sword'
		self.armor = 0
		gui.set(gui.get_node('health_count'), 'position.x', self.pos_health_count_x)
		gui.set_texture(gui.get_node('heart'), 'items')
		gui.play_flipbook(gui.get_node('heart'), "heart")
		gui.set_scale(gui.get_node('heart'), vmath.vector3(3,3,1))
		gui.set_scale(gui.get_node('health_count'), vmath.vector3(0.3,0.3,1))
		gui.set_scale(gui.get_node('enemy_damage'), vmath.vector3(0.3,0.3,1))
		gui.set_text(gui.get_node('health_count'), self.health..'/'..self.max_health)
	end

	if message_id == hash('golden_sword') then
		gui.set_texture(gui.get_node('sword'), "swords")
		gui.play_flipbook(gui.get_node('sword'), "golden sword")
		self.buff = 'golden_sword'
		self.armor = 0
		gui.set(gui.get_node('health_count'), 'position.x', self.pos_health_count_x)
		gui.set_texture(gui.get_node('heart'), 'items')
		gui.play_flipbook(gui.get_node('heart'), "heart")
		gui.set_scale(gui.get_node('heart'), vmath.vector3(3,3,1))
		gui.set_scale(gui.get_node('health_count'), vmath.vector3(0.3,0.3,1))
		gui.set_scale(gui.get_node('enemy_damage'), vmath.vector3(0.3,0.3,1))
		gui.set_text(gui.get_node('health_count'), self.health..'/'..self.max_health)
		
	end

	if message_id == hash('blood_sword') then
		gui.set_texture(gui.get_node('sword'), "swords")
		gui.play_flipbook(gui.get_node('sword'), "blood sword")
		self.buff = 'blood_sword'
		self.armor = 0
		gui.set(gui.get_node('health_count'), 'position.x', self.pos_health_count_x)
		gui.set_texture(gui.get_node('heart'), 'items')
		gui.play_flipbook(gui.get_node('heart'), "heart")
		gui.set_scale(gui.get_node('heart'), vmath.vector3(3,3,1))
		gui.set_scale(gui.get_node('health_count'), vmath.vector3(0.3,0.3,1))
		gui.set_scale(gui.get_node('enemy_damage'), vmath.vector3(0.3,0.3,1))
		gui.set_text(gui.get_node('health_count'), self.health..'/'..self.max_health)
	end

	if message_id == hash('health_sword') then
		gui.set_texture(gui.get_node('sword'), "swords")
		gui.play_flipbook(gui.get_node('sword'), "health sword")
		self.buff = 'health_sword'
		self.armor = 0
		gui.set(gui.get_node('health_count'), 'position.x', self.pos_health_count_x)
		gui.set_texture(gui.get_node('heart'), 'items')
		gui.play_flipbook(gui.get_node('heart'), "heart")
		gui.set_scale(gui.get_node('heart'), vmath.vector3(3,3,1))
		gui.set_scale(gui.get_node('health_count'), vmath.vector3(0.3,0.3,1))
		gui.set_scale(gui.get_node('enemy_damage'), vmath.vector3(0.3,0.3,1))
		gui.set_text(gui.get_node('health_count'), self.health..'/'..self.max_health)
	end

	if message_id == hash('poison_sword') then
		gui.set_texture(gui.get_node('sword'), "swords")
		gui.play_flipbook(gui.get_node('sword'), "poison sword")
		self.buff = 'poison_sword'
		self.armor = 0
		gui.set(gui.get_node('health_count'), 'position.x', self.pos_health_count_x)
		gui.set_texture(gui.get_node('heart'), 'items')
		gui.play_flipbook(gui.get_node('heart'), "heart")
		gui.set_scale(gui.get_node('heart'), vmath.vector3(3,3,1))
		gui.set_scale(gui.get_node('health_count'), vmath.vector3(0.3,0.3,1))
		gui.set_scale(gui.get_node('enemy_damage'), vmath.vector3(0.3,0.3,1))
		gui.set_text(gui.get_node('health_count'), self.health..'/'..self.max_health)
	end

	if message_id == hash('rusty_sword') then
		gui.set_texture(gui.get_node('sword'), "swords")
		gui.play_flipbook(gui.get_node('sword'), "rusty_sword")
		self.buff = 'rusty_sword'
		self.armor = 0
		gui.set(gui.get_node('health_count'), 'position.x', self.pos_health_count_x)
		gui.set_texture(gui.get_node('heart'), 'items')
		gui.play_flipbook(gui.get_node('heart'), "heart")
		gui.set_scale(gui.get_node('heart'), vmath.vector3(3,3,1))
		gui.set_scale(gui.get_node('health_count'), vmath.vector3(0.3,0.3,1))
		gui.set_scale(gui.get_node('enemy_damage'), vmath.vector3(0.3,0.3,1))
		gui.set_text(gui.get_node('health_count'), self.health..'/'..self.max_health)
	end

	if message_id == hash('stamina_sword') then
		gui.set_texture(gui.get_node('sword'), "swords")
		gui.play_flipbook(gui.get_node('sword'), "stamina sword")
		self.buff = 'stamina_sword'
		self.armor = 0
		gui.set(gui.get_node('health_count'), 'position.x', self.pos_health_count_x)
		gui.set_texture(gui.get_node('heart'), 'items')
		gui.play_flipbook(gui.get_node('heart'), "heart")
		gui.set_scale(gui.get_node('heart'), vmath.vector3(3,3,1))
		gui.set_scale(gui.get_node('health_count'), vmath.vector3(0.3,0.3,1))
		gui.set_scale(gui.get_node('enemy_damage'), vmath.vector3(0.3,0.3,1))
		gui.set_text(gui.get_node('health_count'), self.health..'/'..self.max_health)
	end

	if message_id == hash('sword_straight') then
		gui.set_texture(gui.get_node('sword'), "swords")
		gui.play_flipbook(gui.get_node('sword'), "staight sword")
		self.buff = 'straight_sword'
		self.armor = 0
		gui.set(gui.get_node('health_count'), 'position.x', self.pos_health_count_x)
		gui.set_texture(gui.get_node('heart'), 'items')
		gui.play_flipbook(gui.get_node('heart'), "heart")
		gui.set_scale(gui.get_node('heart'), vmath.vector3(3,3,1))
		gui.set_scale(gui.get_node('health_count'), vmath.vector3(0.3,0.3,1))
		gui.set_scale(gui.get_node('enemy_damage'), vmath.vector3(0.3,0.3,1))
		gui.set_text(gui.get_node('health_count'), self.health..'/'..self.max_health)
	end

	if message_id == hash('light_armor') then
		gui.set_texture(gui.get_node('sword'), "swords")
		gui.play_flipbook(gui.get_node('sword'), "sword")
		self.buff = 'chain_armor'
		self.armor = 50
		gui.set_texture(gui.get_node('heart'), 'swords')
		gui.set_scale(gui.get_node('heart'), vmath.vector3(0.1,0.1,1))
		gui.set_text(gui.get_node('health_count'), self.armor)
		gui.set_scale(gui.get_node('health_count'), vmath.vector3(10,10,1))
		gui.set_scale(gui.get_node('enemy_damage'), vmath.vector3(10,10,1))
		gui.set(gui.get_node('health_count'), 'position.x', self.pos_health_count_x + 300)
		gui.play_flipbook(gui.get_node('heart'), "chain_armor")
	end

	if message_id == hash('armor') then
		gui.set_texture(gui.get_node('sword'), "swords")
		gui.play_flipbook(gui.get_node('sword'), "sword")
		self.buff = 'armor'
		self.armor = 100
		gui.set_texture(gui.get_node('heart'), 'swords')
		gui.set_scale(gui.get_node('heart'), vmath.vector3(0.1,0.1,1))
		gui.set_text(gui.get_node('health_count'), self.armor)
		gui.set_scale(gui.get_node('health_count'), vmath.vector3(10,10,1))
		gui.set_scale(gui.get_node('enemy_damage'), vmath.vector3(10,10,1))
		gui.set(gui.get_node('health_count'), 'position.x', self.pos_health_count_x + 300)
		gui.play_flipbook(gui.get_node('heart'), "armor")
	end

	if message_id == hash('add_health_from_damage') then
		self.health = self.health + message.health
		if self.health >= self.max_health then
			self.health = self.max_health
		end
		gui.set_text(gui.get_node('health_count'), self.health..'/'..self.max_health)
	end

	if message_id == hash('blood_sword_damage') then
		self.health = self.health - 5
		if self.health <= 0 then
			self.health = 0
			gui.set_text(gui.get_node('health_count'), self.health..'/'..self.max_health)
			msg.post('/game_manager#game_manager', 'end_game')
		end
		gui.set_text(gui.get_node('health_count'), self.health..'/'..self.max_health)
	end

	if message_id == hash('init_dungeon') then
		self.level_of_dungeon = message.level_of_dungeon
		gui.set_text(gui.get_node('level_dungeon'), 'Уровень подземелья: '..self.level_of_dungeon)
		self.enemies_of_level = message.enemies_in_levels
		self.current_enemies_of_level = self.enemies_of_level
		gui.set_text(gui.get_node('enemies_count'), 'Врагов на уровне: '..self.current_enemies_of_level..'/'..self.enemies_of_level)
		timer.delay(0.2, false, function() msg.post(self.enemy, 'player_damage', {player_damage = self.damage})end)
	end

	if message_id == hash('send_id_enemy') then
		self.enemy = message.id
	end

	if message_id == hash('add_potion') then
		add_potion(self)
	end

	if message_id == hash('add_exp') then
		print(message.exp)
		add_exp(self, message.exp)
		add_exp_scale(self,message.exp)
		timer.delay(0.2, false, function() msg.post(self.enemy, 'player_damage', {player_damage = self.damage})end)
		if self.exp >= self.max_exp then
			add_level(self)
			self.health = self.max_health
			msg.post('#level_up', 'enable')
			timer.delay(0.4, false, function() 
				msg.post(self.enemy, 'hide')
				msg.post('/game_manager#game_manager', 'chest_hide')
			end)
			self.exp = self.exp - self.max_exp
			exp_scale = 0
			add_exp_scale(self,	self.exp)
			self.max_exp= self.max_exp + 500
		end

	end

	if message_id == hash('current_enemies_count') then
		self.current_enemies_of_level = message.current_enemies_count
		gui.set_text(gui.get_node('enemies_count'), 'Врагов на уровне: '..self.current_enemies_of_level..'/'..self.enemies_of_level)
		
	end

	if message_id == hash('add_coins') then
		add_coins(self, message.coins)
	end

	if message_id == hash('player_damage') and self.health > 0 then
		take_damage(self, message.damage,message.type)
		
	end
	if message_id == hash('minus_energy') then
		if self.buff == 'rusty_sword' then
			take_energy(self, 5)
		else
			take_energy(self, 10)
		end
		
	end

	if message_id == hash('add_max_health') then
		self.max_health = self.max_health + 10
		self.health = self.max_health
		self.energy = self.max_energy
		if self.armor <= 0 then
			gui.set_text(gui.get_node('health_count'), self.health..'/'..self.max_health)
		end
		
		msg.post(self.enemy, 'show')
		msg.post(self.chest, 'show')
	end

	if message_id == hash('add_max_damage') then
		self.damage = self.damage + 2
		self.health = self.max_health
		self.energy = self.max_energy
		if self.armor <= 0 then
			gui.set_text(gui.get_node('health_count'), self.health..'/'..self.max_health)
		end
		gui.set_text(gui.get_node('damage_count'), self.damage)
		msg.post(self.enemy, 'show')
		msg.post(self.chest, 'show')
	end

	if message_id == hash('add_max_energy') then
		self.max_energy = self.max_energy + 10
		self.health = self.max_health
		self.energy = self.max_energy
		if self.armor <= 0 then
			gui.set_text(gui.get_node('health_count'), self.health..'/'..self.max_health)
		end
		gui.set_text(gui.get_node('energy_count'), self.energy..'/'..self.max_energy)
		msg.post(self.enemy, 'show')
		msg.post(self.chest, 'show')
	end
 	
	if message_id == hash('add_energy') then
		if self.buff == 'stamina_sword' then
			self.energy_time_count = 0.2
		else
			self.energy_time_count = 0.6
		end
		self.energy_time = timer.delay(self.energy_time_count, true, function() 		
			gui.set_text(gui.get_node('energy_count'), self.energy..'/'..self.max_energy)
			if self.energy < self.max_energy then
				self.energy = self.energy + 10
			end
			
			gui.set_text(gui.get_node('energy_count'), self.energy..'/'..self.max_energy) 
			if self.energy >= self.max_energy then
				self.energy = self.max_energy
				timer.cancel(self.energy_time)
				
				timer.delay(0.2, false, function() 
					if self.enemy then
						msg.post(self.enemy, 'energy_full')
					end

					
				end)
				
			end   
		end)
		
	end
end

function on_input(self, action_id, action)
	if gui.pick_node(gui.get_node('potion'), action.x, action.y) and action.released and action_id == hash("touch") then
		use_potion(self)
	end


end