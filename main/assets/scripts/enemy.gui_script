local my_node = nil
local color = nil
local scale = nil
local lifebar = nil
local lifebar_damage = nil
local lifebar_crit_damage = nil
local damage_message = nil
math.randomseed(os.time())
local function appereance_animation(self)
	self.x,self.y = window.get_size()
	gui.set(my_node, 'position.x', self.x + 500)
	gui.animate(my_node, 'position.x', gui.get(gui.get_node('name'),'position.x'), gui.EASING_LINEAR, 0.7)
	timer.delay(0.7, false, function() 
		gui.animate(gui.get_node('name'), 'color.w', 1, gui.EASING_LINEAR, 0.4)
		gui.animate(gui.get_node('black_rect'), 'color.w', 1, gui.EASING_LINEAR, 0.4)
		gui.animate(gui.get_node('red_rect'), 'color.w', 1, gui.EASING_LINEAR, 0.4)
		gui.animate(gui.get_node('health_count'), 'color.w', 1, gui.EASING_LINEAR, 0.4)
	end)
end


local function damage_animation(self)
	gui.set_color(gui.get_node("character"), vmath.vector4(1,0,0,1))
	gui.set_scale(gui.get_node("character"),vmath.vector3(0.7,0.7,1))
	gui.animate(my_node, gui.PROP_COLOR, color, gui.EASING_LINEAR, 0.5,gui.PLAYBACK_ONCE_FORWARD)
	gui.animate(my_node, gui.PROP_SCALE,scale , gui.EASING_LINEAR, 0.5,gui.PLAYBACK_ONCE_FORWARD)
end


function init(self)
	gui.set(gui.get_node('name'),'color.w',0)
	gui.set(gui.get_node('black_rect'),'color.w',0)
	gui.set(gui.get_node('red_rect'),'color.w',0)
	gui.set(gui.get_node('health_count'),'color.w',0)
	msg.post('.','acquire_input_focus' )
	my_node = gui.get_node("character")
	color = gui.get_color(gui.get_node("character"))
	appereance_animation(self)
	scale = gui.get_scale(gui.get_node("character"))
	
	self.max_health = nil
	self.health = nil
	self.damage = 0
	self.damage_types = {'miss','damage','crit_damage'}
	self.coins = 0
	lifebar = gui.get(gui.get_node('red_rect'),'scale.x')
		
end


function on_message(self, message_id, message, sender)
	if message_id == hash('stats') then
		self.max_health = message.health
		self.health = self.max_health
		self.damage = message.damage
		self.coins = message.coins
		gui.set_text(gui.get_node('name'), message.name)
		gui.set_text(gui.get_node('health_count'), self.health..'/'..self.max_health)
		timer.delay(message.delay_attack, true, function() msg.post('/player#player', 'player_damage',{damage = 10})end)
	end
	if message_id == hash('not_energy') then
		print('word word')
		msg.post('.', 'release_input_focus')
	end

	if message_id == hash('energy_full') then
		msg.post('.', 'acquire_input_focus')
	end
end

function on_input(self, action_id, action)
	local my_node = gui.get_node("character")
	if gui.pick_node(my_node, action.x, action.y) and action.released and action_id == hash("touch") then
		
		local damage_type = self.damage_types[math.random(1,#self.damage_types)]
		print(damage_type)
		timer.delay(0.04, false, function() 

			msg.post('/player#player', 'minus_energy')
		end)
		if damage_type == 'miss' then
			damage_message = gui.new_text_node(vmath.vector3(960 /2 + 150,300,1), 'Промах')
			gui.animate(damage_message, 'color.w', 0, gui.EASING_LINEAR, 0.8)
			gui.animate(damage_message, 'position.y', 330, gui.EASING_LINEAR, 0.4)
			return
		end
		damage_animation()
		
		if damage_type == 'damage' then
			damage_message = gui.new_text_node(vmath.vector3(960 /2 + 150,300,1), self.damage)
			gui.animate(damage_message, 'color.w', 0, gui.EASING_LINEAR, 0.8)
			gui.animate(damage_message, 'position.y', 330, gui.EASING_LINEAR, 0.4)
			self.health = self.health - self.damage
			if lifebar_damage == nil or lifebar_crit_damage == nil then
				lifebar_damage = lifebar / (self.max_health / self.damage)
				lifebar_crit_damage = (lifebar / (self.max_health / self.damage)) * 2
			 end
			lifebar = lifebar - lifebar_damage
			print('обычный'..lifebar_damage)
			gui.set(gui.get_node('red_rect'), 'scale.x', lifebar)
		elseif damage_type == 'crit_damage' then
			damage_message = gui.new_text_node(vmath.vector3(960 /2 + 150,300,1), self.damage * 2)
			gui.set(damage_message, gui.PROP_COLOR, vmath.vector4(1,0,0,1))
			gui.animate(damage_message, 'color.w', 0, gui.EASING_LINEAR,0.8)
			gui.animate(damage_message, 'position.y', 330, gui.EASING_LINEAR, 0.4)
			self.health = self.health - self.damage * 2
			if lifebar_damage == nil or lifebar_crit_damage == nil then
				lifebar_damage = lifebar / (50 / 10)
				lifebar_crit_damage = (lifebar / (50 / 10)) * 2
			end
			print('крит'..lifebar_crit_damage)
			lifebar = lifebar - lifebar_crit_damage 
			gui.set(gui.get_node('red_rect'), 'scale.x', lifebar)
		end
		if lifebar <= 0 then
			gui.set(gui.get_node('red_rect'), 'scale.x',0)
		end
		if self.health <= 0 then
			self.health = 0
			msg.post('.','release_input_focus' )
			msg.post('/game_manager#game_manager', 'create_new_enemy')
			msg.post('/player#player', 'add_coins',{coins = self.coins})
			gui.animate(my_node, 'color.w', 0, gui.EASING_LINEAR, 0.3)
			timer.delay(0.5, false, function() msg.post('#death', 'death') end)
		end
		gui.set_text(gui.get_node('health_count'), self.health..'/'..self.max_health)
		
		
	end
end

